<?php
defined('ABSPATH') || exit;

//$subpage = $_GET['subpage'] ?? '';
//
//switch ($subpage) {
//    case 'settings':
//        include __DIR__ . '/settings.php';
//        return;
//}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    check_admin_referer('bulk-abilities');
    update_option('mcp-server', $_POST['data'] ?? []);
}

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/agent.php';

AssistantAgent::make()->resolveChatHistory()->flushAll();

?>
<div class="wrap">
    <h2>How may I help you?</h2>


    <style>
        #container {
            font-family: Arial, sans-serif;
            background:#f5f5f5;
            margin:0;
            display:flex;
            flex-direction:column;
            height:80vh;
        }
        #chat {
            flex:1;
            overflow-y:auto;
            padding:20px;
        }
        .message {
            margin:10px 0;
            max-width:70%;
            padding:10px 15px;
            border-radius:12px;
            line-height:1.4;
        }
        .user   {
            background:#0084ff;
            color:#fff;
            align-self:flex-end;
        }
        .bot    {
            background:#e5e5ea;
            color:#000;
            align-self:flex-start;
        }
        #inputArea {
            display:flex;
            padding:10px;
            background:#fff;
            border-top:1px solid #ccc;
        }
        #msgInput {
            flex:1;
            padding:10px;
            font-size:16px;
            border:1px solid #ccc;
            border-radius:4px;
        }
        #sendBtn  {
            margin-left:10px;
            padding:10px 20px;
            font-size:16px;
            cursor:pointer;
        }
    </style>

    <div id="container">

        <div id="chat"></div>

        <div id="inputArea">
            <input type="text" id="msgInput" placeholder="Type a message‚Ä¶" autocomplete="off"/>
            <button id="sendBtn">Send</button>
        </div>

        <script>
            /* This code has been generated by Google Gemini... */
            const chatDiv = document.getElementById('chat');
            const msgInput = document.getElementById('msgInput');
            const sendBtn = document.getElementById('sendBtn');

            // -----------------------------------------------------------------
            // Helper: append a bubble (same as before)
            // -----------------------------------------------------------------
            function addMessage(text, sender) {
                const el = document.createElement('div');
                el.className = `message ${sender}`;
                el.innerHTML = text;
                chatDiv.appendChild(el);
                chatDiv.scrollTop = chatDiv.scrollHeight;
            }

            // -----------------------------------------------------------------
            // NEW: async call to your backend
            // -----------------------------------------------------------------
            async function getBotResponseFromServer(userMsg) {
                try {
                    const x = new FormData();
                    x.append("action", "assistant_message");
                    x.append("message", userMsg);
                    x.append("_wpnonce", '<?php echo esc_js(wp_create_nonce('save')); ?>');
                    const response = await fetch(ajaxurl,
                            {
                                method: 'POST',
                                headers: {
                                    //'Content-Type': 'application/json'
                                },
                                body: x
                            });

                    // ---------------------------------------------------------
                    // 1Ô∏è‚É£ Check HTTP status
                    // ---------------------------------------------------------
                    if (!response.ok) {
                        // Server returned an error code (e.g., 500, 429)
                        console.error('Server error:', response.status);
                        return `‚ö†Ô∏è Oops ‚Äì the server responded with ${response.status}.`;
                    }

                    // ---------------------------------------------------------
                    // 2Ô∏è‚É£ Parse JSON payload
                    // ---------------------------------------------------------
                    const data = await response.json();

                    // ---------------------------------------------------------
                    // 3Ô∏è‚É£ Validate expected shape
                    // ---------------------------------------------------------
                    if (!data || typeof data.reply !== 'string') {
                        console.warn('Unexpected payload:', data);
                        return 'ü§î Received an unexpected response from the server.';
                    }

                    return data.reply;   // <-- this string becomes the bot bubble
                } catch (err) {
                    // ---------------------------------------------------------
                    // Network / CORS / parsing errors land here
                    // ---------------------------------------------------------
                    console.error('Fetch failed:', err);
                    return '‚ùå Could not reach the backend. Check your connection or CORS settings.';
                }
            }

            // -----------------------------------------------------------------
            // Send a message (unchanged UI flow, now async)
            // -----------------------------------------------------------------
            async function sendMessage() {
                const userText = msgInput.value.trim();
                if (!userText)
                    return;

                addMessage(userText, 'user');
                msgInput.value = '';
                msgInput.focus();

                // Show a temporary ‚Äútyping‚Äù placeholder (optional but nice UX)
                const typingId = `typing-${Date.now()}`;
                const typingEl = document.createElement('div');
                typingEl.id = typingId;
                typingEl.className = 'message bot';
                typingEl.textContent = '‚Ä¶';
                chatDiv.appendChild(typingEl);
                chatDiv.scrollTop = chatDiv.scrollHeight;

                // -----------------------------------------------------------------
                // 1Ô∏è‚É£ Get the real reply from the server
                // -----------------------------------------------------------------
                const botReply = await getBotResponseFromServer(userText);

                // -----------------------------------------------------------------
                // Replace the placeholder with the actual reply
                // -----------------------------------------------------------------
                typingEl.remove();                 // drop the ‚Äú‚Ä¶‚Äù
                addMessage(botReply, 'bot');       // render final bubble
            }

            // -----------------------------------------------------------------
            // UI event wiring (same as before)
            // -----------------------------------------------------------------
            sendBtn.addEventListener('click', sendMessage);
            msgInput.addEventListener('keypress', e => {
                if (e.key === 'Enter')
                    sendMessage();
            });
        </script>


    </div>